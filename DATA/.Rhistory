knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ggplot2)
library(reshape2)
# Chunk 3
variational_bayes <- function(y, mu0, lambda0, a0, b0, tol = 1e-6, max_iter = 1000) {
N <- length(y)
# Initialize E[tau^2] using the prior
E_tau <- a0 / b0
# Initialize VB parameters for mu (they depend on E[tau^2])
mu_q <- (sum(y) + lambda0 * mu0) / (N + lambda0)
sigma_squared_VB <- 1 / (E_tau * (N + lambda0))
# a is fixed in VB update
a <- a0 + (N + 1) / 2
iter <- 0
repeat {
iter <- iter + 1
E_tau_old <- E_tau
# Update q(mu): compute mean and variance for the Normal dist
sigma_squared_VB <- 1 / (E_tau * (N + lambda0))
mu_q <- (sum(y) + lambda0 * mu0) / (N + lambda0)
# Update q(tau_squared): update the Gamma parameter b
b <- b0 + 0.5 * ( sum((y - mu_q)^2) + N * sigma_squared_VB +
lambda0 * ((mu_q - mu0)^2 + sigma_squared_VB) )
E_tau <- a / b
if (abs(E_tau - E_tau_old) < tol || iter >= max_iter) break
}
list(mu_VB = mu_q, sigma_squared_VB = sigma_squared_VB, a_VB = a, b_VB = b, E_tau = E_tau, iterations = iter)
}
# Chunk 4
true_bayes <- function(y, mu0, lambda0, a0, b0) {
N <- length(y)
mu_n <- (sum(y) + lambda0 * mu0) / (N + lambda0)
a_n <- a0 + (N + 1) / 2
b_n <- b0 + 0.5 * ( sum((y - mu_n)^2) + lambda0 * ((mu_n - mu0)^2) )
var_mu <- b_n / ((a_n - 1) * (N + lambda0))
list(mu_exact = mu_n, var_mu_exact = var_mu, a_exact = a_n, b_exact = b_n)
}
# Chunk 5
set.seed(42)
y <- rnorm(10, mean = 2, sd = 1)
mu0 <- 0
lambda0 <- 1
a0 <- 0.1
b0 <- 0.1
# Chunk 6
variational_bayes_results <- variational_bayes(y, mu0, lambda0, a0, b0)
true_bayes_results <- true_bayes(y, mu0, lambda0, a0, b0)
# Chunk 7
cat("Variational Bayes (VB) estimates:\n")
cat("mu (VB)       =", variational_bayes_results$mu_VB, "\n")
cat("Var(mu) (VB)  =", variational_bayes_results$sigma_squared_VB, "\n")
cat("Iterations    =", variational_bayes_results$iterations, "\n\n")
cat("Exact Bayesian estimates:\n")
cat("mu (Exact)    =", true_bayes_results$mu_exact, "\n")
cat("Var(mu) (Exact) =", true_bayes_results$var_mu_exact, "\n")
# Chunk 8
mu_VB <- variational_bayes_results$mu_VB
var_VB <- variational_bayes_results$sigma_squared_VB
mu_true <- true_bayes_results$mu_exact
var_true <- true_bayes_results$var_mu_exact
df_true <- 2 * true_bayes_results$a_exact
scale_true <- sqrt(true_bayes_results$b_exact / (true_bayes_results$a_exact * (length(y) + lambda0)))
# Create a grid of mu values covering the main mass of both distributions
lower_bound <- min(mu_VB - 4 * sqrt(var_VB), mu_true - 4 * sqrt(var_true))
upper_bound <- max(mu_VB + 4 * sqrt(var_VB), mu_true + 4 * sqrt(var_true))
mu_grid <- seq(lower_bound, upper_bound, length.out = 1000)
# Compute VB (Normal) density for mu
vb_density <- dnorm(mu_grid, mean = mu_VB, sd = sqrt(var_VB))
true_density <- dt((mu_grid - mu_true) / scale_true, df = df_true) / scale_true
df_plot <- data.frame(mu = mu_grid, VB = vb_density, True = true_density)
# Chunk 9
df_long <- melt(df_plot, id.vars = "mu", variable.name = "Method", value.name = "Density")
ggplot(df_long, aes(x = mu, y = Density, color = Method)) +
geom_line(size = 1) +
labs(title = "Posterior for mu: Exact Bayesian vs Variational Bayes",
x = expression(mu),
y = "Density") +
theme_minimal()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ggplot2)
library(reshape2)
# Chunk 3
variational_bayes <- function(y, mu0, lambda0, a0, b0, tol = 1e-6, max_iter = 1000) {
N <- length(y)
# Initialize E[tau^2] using the prior
E_tau <- a0 / b0
# Initialize VB parameters for mu (they depend on E[tau^2])
mu_q <- (sum(y) + lambda0 * mu0) / (N + lambda0)
sigma_squared_VB <- 1 / (E_tau * (N + lambda0))
# a is fixed in VB update
a <- a0 + (N + 1) / 2
iter <- 0
repeat {
iter <- iter + 1
E_tau_old <- E_tau
# Update q(mu): compute mean and variance for the Normal dist
sigma_squared_VB <- 1 / (E_tau * (N + lambda0))
mu_q <- (sum(y) + lambda0 * mu0) / (N + lambda0)
# Update q(tau_squared): update the Gamma parameter b
b <- b0 + 0.5 * ( sum((y - mu_q)^2) + N * sigma_squared_VB +
lambda0 * ((mu_q - mu0)^2 + sigma_squared_VB) )
E_tau <- a / b
if (abs(E_tau - E_tau_old) < tol || iter >= max_iter) break
}
list(mu_VB = mu_q, sigma_squared_VB = sigma_squared_VB, a_VB = a, b_VB = b, E_tau = E_tau, iterations = iter)
}
# Chunk 4
true_bayes <- function(y, mu0, lambda0, a0, b0) {
N <- length(y)
mu_n <- (sum(y) + lambda0 * mu0) / (N + lambda0)
a_n <- a0 + (N + 1) / 2
b_n <- b0 + 0.5 * ( sum((y - mu_n)^2) + lambda0 * ((mu_n - mu0)^2) )
var_mu <- b_n / ((a_n - 1) * (N + lambda0))
list(mu_exact = mu_n, var_mu_exact = var_mu, a_exact = a_n, b_exact = b_n)
}
# Chunk 5
set.seed(42)
y <- rnorm(100, mean = 2, sd = 1)
mu0 <- 0
lambda0 <- 1
a0 <- 0.1
b0 <- 0.1
# Chunk 6
variational_bayes_results <- variational_bayes(y, mu0, lambda0, a0, b0)
true_bayes_results <- true_bayes(y, mu0, lambda0, a0, b0)
# Chunk 7
cat("Variational Bayes (VB) estimates:\n")
cat("mu (VB)       =", variational_bayes_results$mu_VB, "\n")
cat("Var(mu) (VB)  =", variational_bayes_results$sigma_squared_VB, "\n")
cat("Iterations    =", variational_bayes_results$iterations, "\n\n")
cat("Exact Bayesian estimates:\n")
cat("mu (Exact)    =", true_bayes_results$mu_exact, "\n")
cat("Var(mu) (Exact) =", true_bayes_results$var_mu_exact, "\n")
# Chunk 8
mu_VB <- variational_bayes_results$mu_VB
var_VB <- variational_bayes_results$sigma_squared_VB
mu_true <- true_bayes_results$mu_exact
var_true <- true_bayes_results$var_mu_exact
df_true <- 2 * true_bayes_results$a_exact
scale_true <- sqrt(true_bayes_results$b_exact / (true_bayes_results$a_exact * (length(y) + lambda0)))
# Create a grid of mu values covering the main mass of both distributions
lower_bound <- min(mu_VB - 4 * sqrt(var_VB), mu_true - 4 * sqrt(var_true))
upper_bound <- max(mu_VB + 4 * sqrt(var_VB), mu_true + 4 * sqrt(var_true))
mu_grid <- seq(lower_bound, upper_bound, length.out = 1000)
# Compute VB (Normal) density for mu
vb_density <- dnorm(mu_grid, mean = mu_VB, sd = sqrt(var_VB))
true_density <- dt((mu_grid - mu_true) / scale_true, df = df_true) / scale_true
df_plot <- data.frame(mu = mu_grid, VB = vb_density, True = true_density)
# Chunk 9
df_long <- melt(df_plot, id.vars = "mu", variable.name = "Method", value.name = "Density")
ggplot(df_long, aes(x = mu, y = Density, color = Method)) +
geom_line(size = 1) +
labs(title = "Posterior for mu: Exact Bayesian vs Variational Bayes",
x = expression(mu),
y = "Density") +
theme_minimal()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(ggplot2)
library(reshape2)
# Chunk 3
variational_bayes <- function(y, mu0, lambda0, a0, b0, tol = 1e-6, max_iter = 1000) {
N <- length(y)
# Initialize E[tau^2] using the prior
E_tau <- a0 / b0
# Initialize VB parameters for mu (they depend on E[tau^2])
mu_q <- (sum(y) + lambda0 * mu0) / (N + lambda0)
sigma_squared_VB <- 1 / (E_tau * (N + lambda0))
# a is fixed in VB update
a <- a0 + (N + 1) / 2
iter <- 0
repeat {
iter <- iter + 1
E_tau_old <- E_tau
# Update q(mu): compute mean and variance for the Normal dist
sigma_squared_VB <- 1 / (E_tau * (N + lambda0))
mu_q <- (sum(y) + lambda0 * mu0) / (N + lambda0)
# Update q(tau_squared): update the Gamma parameter b
b <- b0 + 0.5 * ( sum((y - mu_q)^2) + N * sigma_squared_VB +
lambda0 * ((mu_q - mu0)^2 + sigma_squared_VB) )
E_tau <- a / b
if (abs(E_tau - E_tau_old) < tol || iter >= max_iter) break
}
list(mu_VB = mu_q, sigma_squared_VB = sigma_squared_VB, a_VB = a, b_VB = b, E_tau = E_tau, iterations = iter)
}
# Chunk 4
true_bayes <- function(y, mu0, lambda0, a0, b0) {
N <- length(y)
mu_n <- (sum(y) + lambda0 * mu0) / (N + lambda0)
a_n <- a0 + (N + 1) / 2
b_n <- b0 + 0.5 * ( sum((y - mu_n)^2) + lambda0 * ((mu_n - mu0)^2) )
var_mu <- b_n / ((a_n - 1) * (N + lambda0))
list(mu_exact = mu_n, var_mu_exact = var_mu, a_exact = a_n, b_exact = b_n)
}
# Chunk 5
set.seed(42)
y <- rnorm(5, mean = 2, sd = 1)
mu0 <- 0
lambda0 <- 1
a0 <- 0.1
b0 <- 0.1
# Chunk 6
variational_bayes_results <- variational_bayes(y, mu0, lambda0, a0, b0)
true_bayes_results <- true_bayes(y, mu0, lambda0, a0, b0)
# Chunk 7
cat("Variational Bayes (VB) estimates:\n")
cat("mu (VB)       =", variational_bayes_results$mu_VB, "\n")
cat("Var(mu) (VB)  =", variational_bayes_results$sigma_squared_VB, "\n")
cat("Iterations    =", variational_bayes_results$iterations, "\n\n")
cat("Exact Bayesian estimates:\n")
cat("mu (Exact)    =", true_bayes_results$mu_exact, "\n")
cat("Var(mu) (Exact) =", true_bayes_results$var_mu_exact, "\n")
# Chunk 8
mu_VB <- variational_bayes_results$mu_VB
var_VB <- variational_bayes_results$sigma_squared_VB
mu_true <- true_bayes_results$mu_exact
var_true <- true_bayes_results$var_mu_exact
df_true <- 2 * true_bayes_results$a_exact
scale_true <- sqrt(true_bayes_results$b_exact / (true_bayes_results$a_exact * (length(y) + lambda0)))
# Create a grid of mu values covering the main mass of both distributions
lower_bound <- min(mu_VB - 4 * sqrt(var_VB), mu_true - 4 * sqrt(var_true))
upper_bound <- max(mu_VB + 4 * sqrt(var_VB), mu_true + 4 * sqrt(var_true))
mu_grid <- seq(lower_bound, upper_bound, length.out = 1000)
# Compute VB (Normal) density for mu
vb_density <- dnorm(mu_grid, mean = mu_VB, sd = sqrt(var_VB))
true_density <- dt((mu_grid - mu_true) / scale_true, df = df_true) / scale_true
df_plot <- data.frame(mu = mu_grid, VB = vb_density, True = true_density)
# Chunk 9
df_long <- melt(df_plot, id.vars = "mu", variable.name = "Method", value.name = "Density")
ggplot(df_long, aes(x = mu, y = Density, color = Method)) +
geom_line(size = 1) +
labs(title = "Posterior for mu: Exact Bayesian vs Variational Bayes",
x = expression(mu),
y = "Density") +
theme_minimal()
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
library(sf)
library(spData)
library(tidyverse)
library(dplyr)
library(gdistance)
library(terra)
library(exactextractr)
library(lubridate)
library(caret)
library(ggrepel)
library(ggplot2)
library(stringr)
#install.packages("magick")
#install.packages("ggimage")
library(ggimage)
devtools::install_github("statsbomb/StatsBombR")
#devtools::install_github("josephmisiti/SBpitch")
#devtools::install_github("FCrSTATS/SBpitch")
library(SBpitch)
library(StatsBombR)
# Chunk 3
# #Pulling StatsBomb Free Data Into R
# library(tidyverse)
# library(StatsBombR)
# Comps <- FreeCompetitions()
# comps_shots <- Comps %>%
#   filter(
#     competition_gender == 'male',
#     !competition_name %in% c('FIFA U20 World Cup', 'Indian Super league', 'Major League Soccer', 'North American League')
#   )
#
# Matches <- FreeMatches(Comps)
#
# Matches_Shots <- Matches
#
# Matches_Passes <- Matches %>%
#   filter(year(match_date) >= 2000)
#
# StatsBombData_Shots <- free_allevents(MatchesDF = Matches_Shots, Parallel = T)
# StatsBombData_Passes <- free_allevents(MatchesDF = Matches_Passes, Parallel = T)
#
# StatsBombData_Shots = allclean(StatsBombData_Shots)
# StatsBombData_Passes = allclean(StatsBombData_Passes)
#
# shots <- StatsBombData_Shots %>%
#   filter(type.name == "Shot", !is.na(location)) %>%
#   unnest_wider(location, names_sep = "_") %>%
#   rename(x = location_1, y = location_2)
#
# passes <- StatsBombData_Passes %>%
#   filter(type.name == "Pass", !is.na(location)) %>%
#   unnest_wider(location, names_sep = "_") %>%
#   rename(x = location_1, y = location_2)
#
# shots <- shots %>%
#   left_join(
#     Matches %>%
#       select(match_id, match_date),
#     by = "match_id"
#   ) %>%
#   left_join(
#     Comps %>%
#       select(competition_id, season_id, competition_name, season_name),
#     by = c("competition_id", "season_id")
#   ) %>%
#   mutate(match_date = as.Date(match_date))
#
# shots_clean <- shots %>%
#   select(
#     -carry.end_location,
#     -goalkeeper.end_location,
#     -tactics.lineup,
#     -related_events,
#     -shot.freeze_frame,
#     -pass.end_location
#   ) %>%
#   unnest_wider(shot.end_location, names_sep = "_") %>%
#   rename(
#     shot.end_x = shot.end_location_1,
#     shot.end_y = shot.end_location_2
#   )
#
# passes <- passes %>%
#   left_join(
#     Matches %>%
#       select(match_id, match_date),
#     by = "match_id"
#   ) %>%
#   left_join(
#     Comps %>%
#       select(competition_id, season_id, competition_name, season_name),
#     by = c("competition_id", "season_id")
#   ) %>%
#   mutate(match_date = as.Date(match_date))
#
# passes_clean <- passes %>%
#   select(
#     -carry.end_location,
#     -goalkeeper.end_location,
#     -tactics.lineup,
#     -related_events,
#     -shot.end_location,
#     -shot.freeze_frame
#   ) %>%
#   unnest_wider(pass.end_location, names_sep = "_") %>%
#   rename(
#     pass.end_x = pass.end_location_1,
#     pass.end_y = pass.end_location_2
#   )
#
# write_csv(shots_clean, "shots.csv")
# write_csv(passes_clean, "passes.csv")
# Chunk 4
shots_df <- read_csv(unz("shots_new.csv.zip", "shots_new.csv"))
setwd("~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/DATA")
shiny::runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
install.packages('shinydashboard')
shiny::runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
library(plotly)
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
# If your raw CSV is in raw_data:
raw_data <- read_csv("CFC GPS Data.csv")
# Focus on 2024/2025
subset_202425 <- raw_data %>% filter(season == "2024/2025")
# Print out some details
print(subset_202425 %>% select(date, opposition_code, distance, everything()))
View(subset_202425)
subset_202425 <- raw_data %>%
filter(season == "2024/2025") %>%
mutate(date = dmy(date))
print(subset_202425 %>% select(date, opposition_code, distance, everything()))
bad_rows <- subset_202425 %>%
rowwise() %>%
mutate(parsed_date = as.Date(date, format = "%d.%m.%Y")) %>%
filter(is.na(parsed_date))
print(bad_rows)
# If your raw CSV is in raw_data:
raw_data <- read_csv("CFC GPS Data.csv")
# Focus on 2024/2025
subset_202425 <- raw_data %>%
filter(season == "2024/2025")
# %>%  mutate(date = dmy(date))
# Print out some details
print(subset_202425 %>% select(date, opposition_code, distance, everything()))
bad_rows <- subset_202425 %>%
rowwise() %>%
mutate(parsed_date = as.Date(date, format = "%d.%m.%Y")) %>%
filter(is.na(parsed_date))
print(bad_rows)
View(bad_rows)
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
library(tidyverse)
library(lubridate)
library(hms)
library(stringr)
# Read the raw CSV data
raw_data <- read_csv("CFC GPS Data.csv")
# Filter for season 2024/2025 (or another problematic season)
subset_202425 <- raw_data %>% filter(season == "2024/2025")
# Try to process one of the HR zone columns:
bad_values <- subset_202425 %>%
mutate(parsed = sapply(hr_zone_1_hms, function(x) {
x <- as.character(x)
tryCatch({
if (str_detect(x, ":")) {
as.numeric(as_hms(x))
} else {
as.numeric(trimws(x))
}
}, error = function(e) {
message("Error parsing: ", x)
NA_real_
})
}))
print(bad_values %>% select(date, hr_zone_1_hms, parsed))
library(tidyverse)
library(lubridate)
library(hms)
library(stringr)
# Read the raw CSV data
raw_data <- read_csv("CFC GPS Data.csv")
# Filter for season 2024/2025 (or another problematic season)
subset_202425 <- raw_data %>% filter(season == "2023/2024")
# Try to process one of the HR zone columns:
bad_values <- subset_202425 %>%
mutate(parsed = sapply(hr_zone_1_hms, function(x) {
x <- as.character(x)
tryCatch({
if (str_detect(x, ":")) {
as.numeric(as_hms(x))
} else {
as.numeric(trimws(x))
}
}, error = function(e) {
message("Error parsing: ", x)
NA_real_
})
}))
print(bad_values %>% select(date, hr_zone_1_hms, parsed))
rm(list=ls())
library(tidyverse)
library(lubridate)
library(hms)
library(stringr)
# Read the raw CSV data
raw_data <- read_csv("CFC GPS Data.csv")
# Filter for season 2024/2025 (or another problematic season)
subset_202425 <- raw_data %>% filter(season == "2024/2025")
# Try to process one of the HR zone columns:
bad_values <- subset_202425 %>%
mutate(parsed = sapply(hr_zone_1_hms, function(x) {
x <- as.character(x)
tryCatch({
if (str_detect(x, ":")) {
as.numeric(as_hms(x))
} else {
as.numeric(trimws(x))
}
}, error = function(e) {
message("Error parsing: ", x)
NA_real_
})
}))
print(bad_values %>% select(date, hr_zone_1_hms, parsed))
rm(list=ls())
library(tidyverse)
library(lubridate)
library(hms)
library(stringr)
# Read the CSV file (adjust the file path as needed)
raw_data <- read_csv("/Users/tirdodbehbehani/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/DATA/CFC GPS Data.csv")
# Pivot all HR zone columns to long format
hr_long <- raw_data %>%
select(date, starts_with("hr_zone")) %>%
pivot_longer(
cols = starts_with("hr_zone"),
names_to = "zone",
values_to = "value"
) %>%
# Attempt to parse each value
mutate(
parsed = map_dbl(value, function(x) {
x <- as.character(x)
tryCatch({
if (str_detect(x, ":")) {
# If value contains a colon, assume it's in a time format
as.numeric(as_hms(x))
} else {
# Otherwise, trim and try converting directly to numeric
as.numeric(trimws(x))
}
}, error = function(e) {
NA_real_
})
})
)
# Filter rows where parsing failed (i.e. parsed is NA but original value is not missing)
problem_rows <- hr_long %>%
filter(is.na(parsed) & !is.na(value))
print(problem_rows)
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
runApp('~/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
