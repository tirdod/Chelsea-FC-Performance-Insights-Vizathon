) %>%
filter(!is.na(benchmarkPct))
# 2. Apply a date filter (simulate your reactive input)
# For example, use only data from the last 180 days:
date_filter <- Sys.Date() - 180
filtered_data <- physical_data %>% filter(testDate >= date_filter)
# 3. Create a new column "combo" which concatenates expression and quality.
filtered_data <- filtered_data %>% mutate(combo = paste(expression, quality))
# 4. Define the movements we want.
movement_list <- c("Agility", "Jump", "Sprint", "Upper Body")
# 5. Set up the plotting device for 1 row and 4 columns.
# Adjust margins if necessary.
par(mfrow = c(1, 4), mar = c(2, 2, 3, 2))
# 6. Loop over each movement to produce a radar plot.
for (mv in movement_list) {
# Subset data for the movement.
df_mv <- filtered_data %>% filter(movement == mv)
if (nrow(df_mv) == 0) {
plot.new()
title(main = paste(mv, "- No Data"))
next
}
# For each unique combo (e.g. "Isometric Acceleration", "Dynamic Deceleration"),
# select the row with the maximum testDate and average benchmarkPct if needed.
df_latest <- df_mv %>%
group_by(combo) %>%
filter(testDate == max(testDate, na.rm = TRUE)) %>%
summarise(latest_benchmark = mean(benchmarkPct, na.rm = TRUE), .groups = "drop") %>%
arrange(combo)
if (nrow(df_latest) == 0) {
plot.new()
title(main = paste(mv, "- No Data"))
next
}
# Create a named vector (in the order defined by the sorted 'combo').
values <- df_latest$latest_benchmark
names(values) <- df_latest$combo
# fmsb::radarchart expects a data frame with the first row as max values, the second as min values,
# and subsequent rows as the actual data.
radar_data <- rbind(
rep(1, length(values)),   # maximum (i.e., 100% or 1)
rep(0, length(values)),   # minimum (i.e., 0)
values                    # the most recent benchmark values
)
# Convert to data.frame and assign row names.
radar_data <- as.data.frame(radar_data)
rownames(radar_data) <- c("Max", "Min", "Latest")
# 7. Draw the radar chart for this movement using fmsb::radarchart()
radarchart(
radar_data,
axistype = 1,                # Style 1 for axis labeling
seg = 5,                     # This creates 5 segments, yielding 0%,20%,40%,60%,80%,100%
pcol = "blue",               # Polygon border color
pfcol = alpha("blue", 0.3),  # Semi-transparent fill color
plwd = 2,                    # Line width for the polygon border
cglcol = "grey",             # Grid line color
cglty = 1,                   # Grid line type (solid)
axislabcol = "black",        # Color for axis labels (the labels for each variable)
caxislabels = c("0%", "20%", "40%", "60%", "80%", "100%"),  # Define the radial tick labels
vlcex = 0.8,                 # Font size for the variable names on the axes
title = paste(mv, "- Most Recent Performance")
)
}
# 8. Reset plotting device (optional)
par(mfrow = c(1,1))
runApp('Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
# install.packages("fmsb") if not installed
library(fmsb)
library(scales)
# Minimal reproducible data
df_latest <- data.frame(
combo = c("Isometric Acceleration","Isometric Deceleration","Dynamic Acceleration"),
latest_benchmark = c(0.57, 0.82, 0.66)
)
# Sort if you want:
df_latest <- df_latest[order(df_latest$combo), ]
# Make a named vector of values
values <- df_latest$latest_benchmark
# Build custom labels: "Combo (XX.X%)"
custom_labels <- paste0(df_latest$combo, " (", round(values * 100, 1), "%)")
# Build fmsb data frame
radar_data <- rbind(
rep(1, length(values)),  # max=1 => 100%
rep(0, length(values)),  # min=0
values
)
radar_data <- as.data.frame(radar_data)
# Set the colnames to the custom labels
colnames(radar_data) <- custom_labels
rownames(radar_data) <- c("Max","Min","Latest")
# Expand margins so we can see labels
op <- par(mfrow = c(1,1), mar = c(6,6,6,6), xpd = TRUE)
radarchart(
radar_data,
axistype = 1,
seg = 5,
pcol = "blue",
pfcol = alpha("blue", 0.3),
plwd = 2,
cglcol = "grey",
cglty = 1,
axislabcol = "black",
caxislabels = c("0%","20%","40%","60%","80%","100%"),
vlcex = 0.9,
title = "Minimal Example: Column Names as Axis Labels"
)
par(op)
runApp('Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
devtools::install_github("ricardo-bion/ggradar")
runApp('Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
library(tidyverse)
library(lubridate)
library(scales)
library(gridExtra)  # for arranging plots
# ----- Read and Clean Your Data -----
physical_data <- read_csv("/Users/tirdodbehbehani/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand/DATA/CFC Physical Capability Data_.csv",
locale = locale(encoding = "Latin1")) %>%
rename(testDate = 1) %>%
mutate(
testDate     = dmy(testDate),
benchmarkPct = as.numeric(benchmarkPct),
movement     = str_to_title(gsub("_", " ", movement)),  # e.g., "upper_body" -> "Upper Body"
expression   = str_to_title(trimws(expression)),
quality      = str_to_title(trimws(quality))
) %>%
filter(!is.na(benchmarkPct))
# Simulate a date filter (e.g., last 180 days)
date_filter <- Sys.Date() - 180
filtered_data <- physical_data %>% filter(testDate >= date_filter)
# Create a new column "combo" (concatenation of expression and quality)
filtered_data <- filtered_data %>% mutate(combo = paste(expression, quality))
# ----- Derive Unique Movements Dynamically -----
unique_movements <- sort(unique(filtered_data$movement))
cat("Unique movements:\n")
print(unique_movements)
# ----- Radar Plot Loop using ggradar -----
radar_plots <- list()
# Loop over each unique movement; for each, we’ll make a radar chart
for(mv in unique_movements) {
# Subset the data for the current movement
df_mv <- filtered_data %>% filter(movement == mv)
if(nrow(df_mv) == 0) {
next
}
# For each unique combo, select the row(s) with the latest testDate and average benchmarkPct if needed.
df_latest <- df_mv %>%
group_by(combo) %>%
filter(testDate == max(testDate, na.rm = TRUE)) %>%
summarise(latest_benchmark = mean(benchmarkPct, na.rm = TRUE), .groups = "drop") %>%
arrange(combo)
if(nrow(df_latest) == 0) next
# Now, create a wide-format data frame suitable for ggradar.
# ggradar expects one row per group (here, we’ll create one row labeled "Latest")
# along with columns for each variable.
# We also need to supply a max row (all 1’s) and a min row (all 0’s).
radar_df <- bind_rows(
# Maximum values row: all set to 1 (100%)
tibble(group = "Max", !!!setNames(as.list(rep(1, nrow(df_latest))), df_latest$combo)),
# Minimum values row: all set to 0
tibble(group = "Min", !!!setNames(as.list(rep(0, nrow(df_latest))), df_latest$combo)),
# Latest performance row
tibble(group = "Latest", !!!setNames(as.list(df_latest$latest_benchmark), df_latest$combo))
)
# Create the radar plot using ggradar
p <- ggradar(radar_df,
grid.min = 0,
grid.mid = 0.5,
grid.max = 1,
group.line.width = 1,
group.point.size = 3,
background.circle.colour = "white",
font.radar = "sans",
legend.position = "bottom",
plot.title = paste(mv, "– Most Recent Performance"),
# You can adjust the label sizes below; each axis (combo) is labeled
# with the combo name (which already has the percentage in it,
# as the numeric value appears in the radar_df columns)
axis.label.size = 3
)
radar_plots[[mv]] <- p
}
library(ggradar)
library(tidyverse)
library(lubridate)
library(scales)
library(ggradar)
library(gridExtra)  # for arranging plots
# ----- Read and Clean Your Data -----
physical_data <- read_csv("/Users/tirdodbehbehani/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand/DATA/CFC Physical Capability Data_.csv",
locale = locale(encoding = "Latin1")) %>%
rename(testDate = 1) %>%
mutate(
testDate     = dmy(testDate),
benchmarkPct = as.numeric(benchmarkPct),
movement     = str_to_title(gsub("_", " ", movement)),  # e.g., "upper_body" -> "Upper Body"
expression   = str_to_title(trimws(expression)),
quality      = str_to_title(trimws(quality))
) %>%
filter(!is.na(benchmarkPct))
# Simulate a date filter (e.g., last 180 days)
date_filter <- Sys.Date() - 180
filtered_data <- physical_data %>% filter(testDate >= date_filter)
# Create a new column "combo" (concatenation of expression and quality)
filtered_data <- filtered_data %>% mutate(combo = paste(expression, quality))
# ----- Derive Unique Movements Dynamically -----
unique_movements <- sort(unique(filtered_data$movement))
cat("Unique movements:\n")
print(unique_movements)
# ----- Radar Plot Loop using ggradar -----
radar_plots <- list()
# Loop over each unique movement; for each, we’ll make a radar chart
for(mv in unique_movements) {
# Subset the data for the current movement
df_mv <- filtered_data %>% filter(movement == mv)
if(nrow(df_mv) == 0) {
next
}
# For each unique combo, select the row(s) with the latest testDate and average benchmarkPct if needed.
df_latest <- df_mv %>%
group_by(combo) %>%
filter(testDate == max(testDate, na.rm = TRUE)) %>%
summarise(latest_benchmark = mean(benchmarkPct, na.rm = TRUE), .groups = "drop") %>%
arrange(combo)
if(nrow(df_latest) == 0) next
# Now, create a wide-format data frame suitable for ggradar.
# ggradar expects one row per group (here, we’ll create one row labeled "Latest")
# along with columns for each variable.
# We also need to supply a max row (all 1’s) and a min row (all 0’s).
radar_df <- bind_rows(
# Maximum values row: all set to 1 (100%)
tibble(group = "Max", !!!setNames(as.list(rep(1, nrow(df_latest))), df_latest$combo)),
# Minimum values row: all set to 0
tibble(group = "Min", !!!setNames(as.list(rep(0, nrow(df_latest))), df_latest$combo)),
# Latest performance row
tibble(group = "Latest", !!!setNames(as.list(df_latest$latest_benchmark), df_latest$combo))
)
# Create the radar plot using ggradar
p <- ggradar(radar_df,
grid.min = 0,
grid.mid = 0.5,
grid.max = 1,
group.line.width = 1,
group.point.size = 3,
background.circle.colour = "white",
font.radar = "sans",
legend.position = "bottom",
plot.title = paste(mv, "– Most Recent Performance"),
# You can adjust the label sizes below; each axis (combo) is labeled
# with the combo name (which already has the percentage in it,
# as the numeric value appears in the radar_df columns)
axis.label.size = 3
)
radar_plots[[mv]] <- p
}
# Arrange all the radar plots side by side
final_radar <- grid.arrange(grobs = radar_plots, nrow = 1)
final_radar
runApp('Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
install.packages('patchwork')
runApp('Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
# Load required libraries
library(tidyverse)
library(lubridate)
library(plotly)
library(scales)
# Read and clean the data (update your file path if needed)
physical_data <- read_csv("/Users/tirdodbehbehani/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/DATA/CFC Physical Capability Data_.csv",
locale = locale(encoding = "Latin1")) %>%
rename(testDate = 1) %>%
mutate(
testDate     = dmy(testDate),
benchmarkPct = as.numeric(benchmarkPct),
movement     = str_to_title(gsub("_", " ", movement)),  # e.g., "upper_body" -> "Upper Body"
expression   = str_to_title(trimws(expression)),
quality      = str_to_title(trimws(quality)),
# Create a combo field with a newline between expression and quality:
combo = paste(expression, "\n", quality)
) %>%
filter(!is.na(benchmarkPct))
# Get unique movements
unique_movements <- sort(unique(physical_data$movement))
cat("Unique Movements:\n")
print(unique_movements)
# Loop over each movement; create and print a Plotly radar chart
for (mv in unique_movements) {
# Subset data for the current movement
df_mv <- physical_data %>% filter(movement == mv)
if (nrow(df_mv) == 0) {
cat("No data for movement:", mv, "\n")
next
}
# For each unique combo, select the row with the latest testDate and average the benchmarkPct if needed
df_latest <- df_mv %>%
group_by(combo) %>%
filter(testDate == max(testDate, na.rm = TRUE)) %>%
summarise(
latest_benchmark = mean(benchmarkPct, na.rm = TRUE),
testDate = max(testDate, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(combo)
if (nrow(df_latest) == 0) {
cat("No latest data for movement:", mv, "\n")
next
}
# To close the radar polygon, append the first row at the end
df_closed <- bind_rows(df_latest, df_latest[1,])
# Create a Plotly radar (polar) chart
p <- plot_ly(type = 'scatterpolar', mode = 'lines+markers') %>%
add_trace(
r = df_closed$latest_benchmark,
theta = df_closed$combo,
fill = 'toself',
text = paste0("Test Date: ", df_closed$testDate,
"<br>Benchmark: ", scales::percent(df_closed$latest_benchmark, accuracy = 1)),
hoverinfo = "text",
name = mv
) %>%
layout(
title = list(text = mv, x = 0.5),
polar = list(
radialaxis = list(
tickvals = seq(0, 1, by = 0.2),
ticktext = c("0%", "20%", "40%", "60%", "80%", "100%"),
range = c(0, 1)
)
),
margin = list(l = 40, r = 40, b = 40, t = 60)
)
# Print the current plot (each iteration prints to the viewer)
print(p)
# Optional: Pause between plots (uncomment next line if running interactively)
readline(prompt = paste("Press [enter] to continue for", mv, "plot"))
}
# Load required libraries
library(tidyverse)
library(lubridate)
library(plotly)
library(scales)
# Read and clean the data (update your file path if needed)
physical_data <- read_csv("/Users/tirdodbehbehani/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/DATA/CFC Physical Capability Data_.csv",
locale = locale(encoding = "Latin1")) %>%
rename(testDate = 1) %>%
mutate(
testDate     = dmy(testDate),
benchmarkPct = as.numeric(benchmarkPct),
movement     = str_to_title(gsub("_", " ", movement)),  # e.g., "upper_body" -> "Upper Body"
expression   = str_to_title(trimws(expression)),
quality      = str_to_title(trimws(quality)),
# Create a combo field with a newline between expression and quality:
combo = paste(expression, "\n", quality)
) %>%
filter(!is.na(benchmarkPct))
# Get unique movements
unique_movements <- sort(unique(physical_data$movement))
cat("Unique Movements:\n")
print(unique_movements)
# Loop over each movement; create and print a Plotly radar chart
for (mv in unique_movements) {
# Subset data for the current movement
df_mv <- physical_data %>% filter(movement == mv)
if (nrow(df_mv) == 0) {
cat("No data for movement:", mv, "\n")
next
}
# For each unique combo, select the row with the latest testDate and average the benchmarkPct if needed
df_latest <- df_mv %>%
group_by(combo) %>%
filter(testDate == max(testDate, na.rm = TRUE)) %>%
summarise(
latest_benchmark = mean(benchmarkPct, na.rm = TRUE),
testDate = max(testDate, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(combo)
if (nrow(df_latest) == 0) {
cat("No latest data for movement:", mv, "\n")
next
}
# To close the radar polygon, append the first row at the end
df_closed <- bind_rows(df_latest, df_latest[1,])
# Create a Plotly radar (polar) chart
p <- plot_ly(type = 'scatterpolar', mode = 'lines+markers') %>%
add_trace(
r = df_closed$latest_benchmark,
theta = df_closed$combo,
fill = 'toself',
text = paste0("Test Date: ", df_closed$testDate,
"<br>Benchmark: ", scales::percent(df_closed$latest_benchmark, accuracy = 1)),
hoverinfo = "text",
name = mv
) %>%
layout(
title = list(text = mv, x = 0.5),
polar = list(
radialaxis = list(
tickvals = seq(0, 1, by = 0.2),
ticktext = c("0%", "20%", "40%", "60%", "80%", "100%"),
range = c(0, 1)
)
),
margin = list(l = 40, r = 40, b = 40, t = 60)
)
# Print the current plot (each iteration prints to the viewer)
print(p)
# Optional: Pause between plots (uncomment next line if running interactively)
readline(prompt = paste("Press [enter] to continue for", mv, "plot"))
}
# Load required libraries
library(tidyverse)
library(lubridate)
library(plotly)
library(scales)
# Read and clean the data (update your file path if needed)
physical_data <- read_csv("/Users/tirdodbehbehani/Desktop/Soccer Analytics/chelsea_performance_insights/Competition/DATA/CFC Physical Capability Data_.csv",
locale = locale(encoding = "Latin1")) %>%
rename(testDate = 1) %>%
mutate(
testDate     = dmy(testDate),
benchmarkPct = as.numeric(benchmarkPct),
movement     = str_to_title(gsub("_", " ", movement)),  # e.g., "upper_body" -> "Upper Body"
expression   = str_to_title(trimws(expression)),
quality      = str_to_title(trimws(quality)),
# Create a combo field with a newline between expression and quality:
combo = paste(expression, "\n", quality)
) %>%
filter(!is.na(benchmarkPct))
# Get unique movements
unique_movements <- sort(unique(physical_data$movement))
cat("Unique Movements:\n")
print(unique_movements)
# Loop over each movement; create and print a Plotly radar chart
for (mv in unique_movements) {
# Subset data for the current movement
df_mv <- physical_data %>% filter(movement == mv)
if (nrow(df_mv) == 0) {
cat("No data for movement:", mv, "\n")
next
}
# For each unique combo, select the row with the latest testDate and average the benchmarkPct if needed
df_latest <- df_mv %>%
group_by(combo) %>%
filter(testDate == max(testDate, na.rm = TRUE)) %>%
summarise(
latest_benchmark = mean(benchmarkPct, na.rm = TRUE),
testDate = max(testDate, na.rm = TRUE),
.groups = "drop"
) %>%
arrange(combo)
if (nrow(df_latest) == 0) {
cat("No latest data for movement:", mv, "\n")
next
}
# To close the radar polygon, append the first row at the end
df_closed <- bind_rows(df_latest, df_latest[1,])
# Create a Plotly radar (polar) chart
p <- plot_ly(type = 'scatterpolar', mode = 'lines+markers') %>%
add_trace(
r = df_closed$latest_benchmark,
theta = df_closed$combo,
fill = 'toself',
text = paste0("Test Date: ", df_closed$testDate,
"<br>Benchmark: ", scales::percent(df_closed$latest_benchmark, accuracy = 1)),
hoverinfo = "text",
name = mv
) %>%
layout(
title = list(text = mv, x = 0.5),
polar = list(
radialaxis = list(
tickvals = seq(0, 1, by = 0.2),
ticktext = c("0%", "20%", "40%", "60%", "80%", "100%"),
range = c(0, 1)
)
),
margin = list(l = 40, r = 40, b = 40, t = 60)
)
# Print the current plot (each iteration prints to the viewer)
print(p)
# Optional: Pause between plots (uncomment next line if running interactively)
readline(prompt = paste("Press [enter] to continue for", mv, "plot"))
}
runApp('Desktop/Soccer Analytics/chelsea_performance_insights/Competition/tirdod/load_demand')
shiny::runApp()
install.packages("rsconnect")
library(rsconnect)
rsconnect::setAccountInfo(name='tirdodbehbehani', token='16F68F2F3E69F76279ECD3CD60A69A0C', secret='p+x3/VNurRC/WYUXEdEhxjUw+0tqeFonfWUO70Jo')
library(rsconnect)
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
runApp()
rsconnect::deployApp()
getwd()
file.exists("DATA/CFC Physical Capability Data_.csv")
file.exists("DATA//CFC Physical Capability Data_.csv")
file.exists("www/DATA/CFC Physical Capability Data_.csv")
file.exists("DATA/CFC Physical Capability Data_.csv")
file.exists("DATA/CFC GPS Data.csv")
rsconnect::deployApp()
rsconnect::deployApp(appName = "ChelseaPerformanceInsightsVizathon")
runApp()
runApp()
rsconnect::deployApp(appName = "ChelseaPerformanceInsightsVizathon")
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::deployApp(appName = "ChelseaPerformanceInsightsVizathon")
runApp()
rsconnect::deployApp(appName = "ChelseaPerformanceInsightsVizathon")
